{"version":3,"sources":["idsicon.js","Card.js","CardList.js","robots.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Socialids","props","a","b","c","d","fbid","instaid","twitid","gitid","className","url","bgColor","fgColor","Card","id","name","email","alt","src","CardList","robots","map","user","i","key","username","SearchBox","searchchange","style","color","type","placeholder","onChange","App","onSearchChanges","event","setState","searchfields","target","value","state","filterrobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cce8bcf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { SocialIcon } from 'react-social-icons';\r\n\r\nconst Socialids = (props) => {\r\n\tconst { fbid, instaid, twitid, gitid } = props;\r\n\tvar a,b,c,d;\r\n\tif (instaid!==\"\"){\r\n\t\ta = <li className=\"dib mr3 grow-large\"><SocialIcon url={`http://instagram.com/${instaid}`} bgColor=\"black\" fgColor=\"white\" /></li>;\r\n\t\t\r\n\t}\r\n\telse{ a = '';}\r\n\tif (fbid !== '' ){\r\n\t\t b = <li className=\"dib mr3 grow-large\"><SocialIcon url={`http://facebook.com/${fbid}`} bgColor=\"black\" fgColor=\"white\" /></li>; \r\n\t}\r\n\telse{\r\n\t\t b='';\r\n\t}\r\n\tif (twitid !== '' ){\r\n\t\t c = <li className=\"dib mr3 grow-large\"><SocialIcon url={`http://twitter.com/${twitid}`} bgColor=\"black\" fgColor=\"white\" /></li>; \r\n\t}\r\n\telse{\r\n\t\t c='';\r\n\t}\r\n\tif (gitid !== '' ){\r\n\t\t d = <li className=\"dib mr3 grow-large\"><SocialIcon url={`http://github.com/${gitid}`} bgColor=\"black\" fgColor=\"white\" /></li>; \r\n\t}\r\n\telse{\r\n\t\t d='';\r\n\t}\r\n\tconst s=<div><ul>{a}{b}{c}{d}</ul></div>;\r\n\treturn (s);\t\r\n}\r\n\r\n\r\n\r\nexport default Socialids;","import React from 'react';\r\nimport Socialids from './idsicon';\r\n\r\n\r\nconst Card = (props) => {\r\n\tconst {id, name, email, fbid, instaid, twitid, gitid} = props;\r\n\treturn(\r\n\r\n\t\t<div className=\"bg-light-green dib br3 grow pa3 ma2 shadow-5 tc\">\r\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<Socialids fbid={fbid} instaid={instaid} twitid={twitid} gitid={gitid} />\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n\treturn (\r\n\t\t<div>{\r\n\t   \t\trobots.map((user,i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\tfbid={robots[i].fbid} \r\n\t\t\t\t\tinstaid={robots[i].instaid} \r\n\t\t\t\t\ttwitid={robots[i].twitid}\r\n\t\t\t\t\tgitid={robots[i].gitid}\r\n\t\t\t\t\t/>);\r\n\t\t\t})\r\n\t   \t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","export const robots = [\r\n  {\r\n    id:'4H1.png',\r\n    name: 'Prashant Kumar',\r\n    username: 'prashant282000',\r\n    email: 'prashant282000@gmail.com',\r\n    fbid: 'profile.php?id=100011930971393',\r\n    instaid:'prashant282000/',\r\n    twitid:'Prashan17981478',\r\n    gitid:'prashant280920'\r\n  },\r\n  {\r\n    id: 'sumit',\r\n    name: 'Sumit Pandey',\r\n    username: 'sumitPy',\r\n    email: 'sumitPandey@gmail.com',\r\n    fbid: 'profile.php?id=100008324256054',\r\n    instaid:'sumitpandey_24/',\r\n    twitid:'',\r\n    gitid:''\r\n  },\r\n  {\r\n    id: 'sahilAhmed',\r\n    name: 'Sahil Ahmed',\r\n    username: 'sahil',\r\n    email: 'sahil@gmail.com',\r\n    fbid: '',\r\n    instaid:'paperboardoo7/',\r\n    twitid:'',\r\n    gitid:''\r\n  },\r\n   {\r\n    id: 'DheerajMangla',\r\n    name: 'Dheeraj Mangla',\r\n    username: 'DM',\r\n    email: 'dheeraj@gmail.com',\r\n    fbid: 'dheeraj.mangla.142',\r\n    instaid:'dheeraj_mangla/',\r\n    twitid:'',\r\n    gitid:''\r\n  },\r\n   {\r\n    id: 'Shivam',\r\n    name: 'Shivam Kashyap',\r\n    username: 'muku',\r\n    email: 'shivam@gmail.com',\r\n    fbid: 'profile.php?id=100008315624268',\r\n    instaid:'shivaaaam18/',\r\n    twitid:'',\r\n    gitid:''\r\n  },\r\n  {\r\n    id: 'Bhumika',\r\n    name: 'Bhumika',\r\n    username: 'Bhu',\r\n    email: 'Bhumi@gmail.com',\r\n    fbid: '',\r\n    instaid:'',\r\n    twitid:'Bhumika69614965?s=08',\r\n    gitid:''\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Sushant Parmar',\r\n    username: 'Sp',\r\n    email: 'susshi_par_mar@gmail.com',\r\n    fbid: 'dnsshnt1315',\r\n    instaid:'sushantprmar/',\r\n    twitid:'',\r\n    gitid:''\r\n  },\r\n  {\r\n    id: 'Ankit',\r\n    name: 'Ankit Mishra',\r\n    username: 'I_m_Ankit',\r\n    email: 'ankit@gmail.com',\r\n    fbid: 'profile.php?id=100044308000574',\r\n    instaid:'ankit_0047/',\r\n    twitid:'',\r\n    gitid:''\r\n  },\r\n  {\r\n    id: 'yashi',\r\n    name: 'Yashi Tyagi',\r\n    username: 'ys_ty',\r\n    email: 'yashityagi@gmail.com',\r\n    fbid: '',\r\n    instaid:'yashi_tyagi25/',\r\n    twitid:'',\r\n    gitid:''\r\n  },\r\n  {\r\n    id: 'Kajal',\r\n    name: 'Kajal Garg',\r\n    username: 'kg',\r\n    email: 'kajal@gmail.com',\r\n    fbid: 'kajal.garg.7543',\r\n    instaid:'kajal_garg_09/',\r\n    twitid:'KajalGa60724607?s=08',\r\n    gitid:''\r\n  },\r\n  {\r\n    id: 'vihwas',\r\n    name: 'Vishwas',\r\n    username: 'Vish',\r\n    email: 'Vishwas@gmail.com',\r\n    fbid: '',\r\n    instaid:'vishwas.nks/',\r\n    twitid:'Vishwas98214411?s=08',\r\n    gitid:''\r\n  },\r\n  {\r\n    id: \"DivyaGoyal\",\r\n    name: 'Divya Goyal',\r\n    username: 'DG',\r\n    email: 'Divya@gmai.com',\r\n    fbid: 'profile.php?id=100035087359667',\r\n    instaid:'gdivya_28/',\r\n    twitid:'',\r\n    gitid:''\r\n  },\r\n  {\r\n    id: \"Khushi\",\r\n    name: 'Khushi Goyal',\r\n    username: 'KhGy',\r\n    email: 'Goyal@gmail.com',\r\n    fbid: 'ammie.goyal.9',\r\n    instaid:'goyalkhushi_/',\r\n    twitid:'',\r\n    gitid:''\r\n  },\r\n  {\r\n    id: \"Vaishali\",\r\n    name: 'Vaishali Bhardwaj',\r\n    username: 'VB',\r\n    email: 'Vaish@gmail.com',\r\n    fbid: '',\r\n    instaid:'sloth_bear_14/',\r\n    twitid:'',\r\n    gitid:''\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchchange}) =>{\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t<input className=\"tc pa3 ba b--green br2 bg-lightest-blue\" style={{color:\"black\"}}\r\n\t\t type='search'\r\n\t\t placeholder='serach robots'\r\n\t\t onChange={searchchange}\r\n\t\t />\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport CardList from './CardList.js';\r\nimport { robots } from './robots';\r\nimport SearchBox from './SearchBox.js';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: robots,\r\n\t\t\tsearchfields: ''\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChanges = (event) => {\r\n\t\tthis.setState({searchfields: event.target.value})\r\n\r\n\t\t\r\n\t}\r\n\trender(){\r\n\r\n\t\tconst filterrobots = this.state.robots.filter(robots => {\r\n\t\t\treturn (robots.name.toLowerCase().includes(this.state.searchfields.toLowerCase()));\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 >RoboFriends</h1>\r\n\t\t\t<SearchBox searchchange={this.onSearchChanges}/>\r\n\t\t\t<CardList robots={filterrobots} />\r\n\t\t</div>\r\n\t\t);\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js'\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}